generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String?
  email                   String              @unique
  password                String?
  isVerified              Boolean?            @default(false) @map("is_verified")
  createdAt               DateTime?           @default(now()) @map("created_at")
  updatedAt               DateTime?           @updatedAt @map("updated_at")
  verificationToken       String?             @unique @map("verification_token")
  verificationTokenExpiry DateTime?           @map("verification_token_expiry")
  countryCode             String              @default("+91") @map("country_code")
  mobileNumber            String              @default("0000000000") @map("mobile_number")
  isMobileVerified        Boolean?            @default(false) @map("is_mobile_verified")
  mobileOtpAttempts       Int?                @default(0) @map("mobile_otp_attempts")
  mobileOtpExpiry         DateTime?           @map("mobile_otp_expiry")
  otp                     String?             @map("otp")
  client                  client[]
  filesReviewRequests     FileReview[]        @relation("requester_reviews")
  filesToReview           FileReview[]        @relation("reviewer_reviews")
  nodesCreated            FileSystemNode[]    @relation("file_system_nodes_created_by_idx")
  nodesUpdated            FileSystemNode[]    @relation("file_system_nodes_updated_by_idx")
  nodes                   FileSystemNode[]    @relation("file_system_nodes_user_id_idx")
  individualOtpLogin      IndividualOtpLogin? @relation("user_otp_login")
  notifications           notifications[]
  orgMemberships          OrgMembership[]     @relation("org_memberships_user_id_idx")
  organizationsCreated    Organization[]      @relation("organization_createdByUser")
  fileReviewComments      FileReviewComment[] @relation("reviewer_comment")
  userCases               UserCase[]          @relation("user_usercases")

  @@map("users")
}

model IndividualOtpLogin {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  mobileNumber String    @unique @map("mobile_number")
  otp          String?
  otpExpiry    DateTime? @map("otp_expiry")
  attempts     Int       @default(0)
  userId       String    @unique @map("user_id") @db.Uuid
  status       OtpStatus @default(PENDING)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation("user_otp_login", fields: [userId], references: [id])

  @@map("individual_otp_logins")
}

model Role {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        RoleName     @unique
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  invitation  Invitation[] @relation("invitation_role_id_idx")
  permission  Permission[] @relation("role_permission_id_idx")

  @@map("roles")
}

model Permission {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      PermissionName
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  roleId    String?        @map("role_id") @db.Uuid
  role      Role?          @relation("role_permission_id_idx", fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, name], name: "roleId_name_unique")
  @@map("permissions")
}

model Organization {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  plan          Plan            @default(FREE)
  isVerified    Boolean         @default(false) @map("is_verified")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  createdBy     String?         @map("created_by") @db.Uuid
  reviewFiles   FileReview[]    @relation("organization_file_review")
  invitations   Invitation[]    @relation("organization_invitations_org_id_idx")
  members       OrgMembership[] @relation("org_memberships_org_id_idx")
  createdByUser User?           @relation("organization_createdByUser", fields: [createdBy], references: [id])

  @@map("organizations")
}

model OrgMembership {
  userId    String       @map("user_id") @db.Uuid
  orgId     String       @map("organization_id") @db.Uuid
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  roleId    String       @map("role_id") @db.Uuid
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  org       Organization @relation("org_memberships_org_id_idx", fields: [orgId], references: [id])
  user      User         @relation("org_memberships_user_id_idx", fields: [userId], references: [id])

  @@unique([userId, orgId])
  @@map("org_memberships")
}

model Invitation {
  email        String
  token        String?          @unique
  expiresAt    DateTime?        @map("expires_at")
  orgId        String           @map("organization_id") @db.Uuid
  status       InvitationStatus @default(PENDING)
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  roleId       String           @map("role_id") @db.Uuid
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization Organization     @relation("organization_invitations_org_id_idx", fields: [orgId], references: [id], onDelete: Cascade)
  role         Role             @relation("invitation_role_id_idx", fields: [roleId], references: [id])

  @@map("invitations")
}

model FileSystemNode {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  type          FileType
  content       String?
  parentId      String?          @map("parent_id") @db.Uuid
  isExpanded    Boolean          @default(false) @map("is_expanded")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  createdBy     String?          @map("created_by") @db.Uuid
  updatedBy     String?          @map("updated_by") @db.Uuid
  userId        String?          @map("user_id") @db.Uuid
  is_default    Boolean          @default(false)
  FileReview    FileReview[]     @relation("file_review")
  createdByUser User?            @relation("file_system_nodes_created_by_idx", fields: [createdBy], references: [id])
  parent        FileSystemNode?  @relation("file_system_node_hierarchy", fields: [parentId], references: [id])
  children      FileSystemNode[] @relation("file_system_node_hierarchy")
  updatedByUser User?            @relation("file_system_nodes_updated_by_idx", fields: [updatedBy], references: [id])
  user          User?            @relation("file_system_nodes_user_id_idx", fields: [userId], references: [id])

  @@index([createdBy])
  @@index([updatedBy])
  @@index([parentId])
  @@index([userId])
  @@map("file_system_nodes")
}

model FileReview {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileId             String              @map("file_id") @db.Uuid
  reviewerId         String              @map("reviewer_id") @db.Uuid
  requesterId        String              @map("requester_id") @db.Uuid
  orgId              String              @map("organization_id") @db.Uuid
  status             FileReviewStatus    @default(PENDING)
  dueDate            DateTime?           @map("due_date")
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  file               FileSystemNode      @relation("file_review", fields: [fileId], references: [id])
  organization       Organization        @relation("organization_file_review", fields: [orgId], references: [id])
  requester          User                @relation("requester_reviews", fields: [requesterId], references: [id])
  reviewer           User                @relation("reviewer_reviews", fields: [reviewerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  fileReviewComments FileReviewComment[] @relation("file_review_comments")

  @@map("file_reviews")
}

model FileReviewComment {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileReviewId String     @map("review_id") @db.Uuid
  userId       String     @map("user_id") @db.Uuid
  content      String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  resolved     Boolean    @default(false)
  fileReview   FileReview @relation("file_review_comments", fields: [fileReviewId], references: [id])
  user         User       @relation("reviewer_comment", fields: [userId], references: [id])

  @@map("review_comments")
}

model CaseManagement {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serialNumber        String                @map("serial_number")
  diaryNumber         String                @map("diary_number")
  caseNumber          String?               @map("case_number")
  parties             String?
  advocates           String?
  bench               String?
  judgmentBy          String?               @map("judgment_by")
  judgmentDate        String?               @map("judgment_date")
  court               String
  date                DateTime              @default(now()) @map("date")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  judgmentUrl         String[]              @map("judgment_url")
  file_path           String?               @default("")
  judgmentText        String[]              @map("judgment_text")
  caseType            String?               @default("") @map("case_type")
  city                String?               @default("")
  district            String?               @default("")
  judgmentType        String?               @default("") @map("judgment_type")
  extracted_judgments extracted_judgments[]

  @@map("case_management")
}

model UserCase {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  status      String   @default("PENDING")
  userId      String   @map("user_id") @db.Uuid
  diaryNumber String   @map("diary_number")
  caseType    String?  @default("") @map("case_type")
  city        String?  @default("")
  court       String   @default("")
  district    String?  @default("")
  user        User     @relation("user_usercases", fields: [userId], references: [id])

  @@map("user_cases")
}

model client {
  name         String
  organization String
  email        String   @unique
  phone_no     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user_id      String   @db.Uuid
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users        User     @relation(fields: [user_id], references: [id])
}

model notifications {
  id           String   @id(map: "Notifications_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  dairy_number String?
  user_id      String?  @db.Uuid
  method       String?
  contact      String?
  message      String?
  status       String?  @default("'pending'::text")
  users        User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model extracted_judgments {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  case_id         String         @db.Uuid
  judgment_url    String
  extractedText   String?
  language        String?
  is_synced       Boolean        @default(false)
  created_at      DateTime       @default(now())
  updated_at      DateTime
  case_management CaseManagement @relation(fields: [case_id], references: [id])

  @@unique([case_id, judgment_url])
}

model api_analytics {
  id        Int      @id @default(autoincrement())
  route     String
  date      DateTime
  count     Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([route, date])
}

model website_feedback {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String?  @unique @db.VarChar(255)
  rating      Int      @default(1)
  suggestion  String?
  created_at  DateTime @default(now())
  updated_at  DateTime
  ipAddress   String?  @db.VarChar(45)
  fingerprint String?  @unique
  deviceId    String?  @db.VarChar(255)

  @@index([created_at])
  @@index([ipAddress])
  @@index([rating])
}

enum OtpStatus {
  PENDING
  VERIFIED
  EXPIRED
}

enum FileReviewStatus {
  PENDING
  IN_REVIEW
  COMPLETED
  DECLINED
}

enum FileType {
  FILE
  FOLDER
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum RoleName {
  ADMIN
  SUPERVISOR
  ASSISTANT
}

enum PermissionName {
  READ
  WRITE
  DELETE
  SHARE
  UPLOAD
  DOWNLOAD
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  ACTIVE
}
