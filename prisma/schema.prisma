generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String?
  email                   String    @unique
  password                String?
  roleId                  String?   @map("role_id") @db.Uuid
  verificationToken       String?   @unique @map("verification_token")
  verificationTokenExpiry DateTime? @map("verification_token_expiry")
  isVerified              Boolean?  @default(false) @map("is_verified")
  isIndividual            Boolean?  @default(true) @map("is_individual")
  organizationId          String?   @map("organization_id") @db.Uuid
  createdAt               DateTime? @default(now()) @map("created_at")
  updatedAt               DateTime? @updatedAt @map("updated_at")

  role           Role?            @relation("role_user_id_idx", fields: [roleId], references: [id])
  organization   Organization?    @relation("user_organization_id_idx", fields: [organizationId], references: [id])
  fileSystemNode FileSystemNode[] @relation("file_system_nodes_user_id_idx")
  createdBy      FileSystemNode[] @relation("file_system_nodes_created_by_idx")
  updatedBy      FileSystemNode[] @relation("file_system_nodes_updated_by_idx")
  organizations  Organization[]   @relation("organization_created_by_idx")
  orgMemberships OrgMembership[]  @relation("org_memberships_user_id_idx")

  @@map("users")
}

model Role {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        RoleName @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user       User[]       @relation("role_user_id_idx")
  permission Permission[] @relation("role_permission_id_idx")
  invitation Invitation[] @relation("invitation_role_id_idx")

  @@map("roles")
}

model Permission {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      PermissionName
  roleId    String?        @map("role_id") @db.Uuid
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  role Role? @relation("role_permission_id_idx", fields: [roleId], references: [id])

  @@unique([roleId, name], name: "roleId_name_unique")
  @@map("permissions")
}

model Organization {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  plan       Plan     @default(FREE)
  isVerified Boolean  @default(false) @map("is_verified")
  createdBy  String?  @map("created_by")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  createdByUser  User?           @relation("organization_created_by_idx", fields: [createdBy], references: [email])
  users          User[]          @relation("user_organization_id_idx")
  invitations    Invitation[]    @relation("organization_invitations_org_id_idx")
  orgMemberships OrgMembership[] @relation("org_memberships_org_id_idx")

  @@map("organizations")
}

model OrgMembership {
  id        String   @id @default(uuid())
  userId    String   @map("user_id") @db.Uuid
  orgId     String   @map("organization_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  org  Organization @relation("org_memberships_org_id_idx", fields: [orgId], references: [id])
  user User         @relation("org_memberships_user_id_idx", fields: [userId], references: [id])

  @@unique([userId, orgId])
  @@map("org_memberships")
}

model Invitation {
  id        String           @id @default(uuid())
  email     String
  token     String?           @unique
  expiresAt DateTime?         @map("expires_at")
  orgId     String           @map("organization_id") @db.Uuid
  roleId    String           @map("role_id") @db.Uuid
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")

  organization Organization @relation("organization_invitations_org_id_idx", fields: [orgId], references: [id], onDelete: Cascade)
  role         Role         @relation("invitation_role_id_idx", fields: [roleId], references: [id])

  @@map("invitations")
}

model FileSystemNode {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  type       FileType
  content    String?  @db.Text // Content is only applicable for files
  isExpanded Boolean  @default(false) @map("is_expanded")
  parentId   String?  @map("parent_id") @db.Uuid // Nullable for root nodes
  userId     String?  @map("user_id") @db.Uuid // TODO : Need to remove this as we already have created by and updated by fields
  createdBy  String?  @map("created_by") @db.Uuid
  updatedBy  String?  @map("updated_by") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  createdByUser User?            @relation("file_system_nodes_created_by_idx", fields: [createdBy], references: [id])
  updatedByUser User?            @relation("file_system_nodes_updated_by_idx", fields: [updatedBy], references: [id])
  user          User?            @relation("file_system_nodes_user_id_idx", fields: [userId], references: [id])
  parent        FileSystemNode?  @relation("file_system_node_hierarchy", fields: [parentId], references: [id])
  children      FileSystemNode[] @relation("file_system_node_hierarchy")

  @@index([createdBy], name: "file_system_nodes_created_by_idx")
  @@index([updatedBy], name: "file_system_nodes_updated_by_idx")
  @@index([parentId], name: "file_system_nodes_parent_id_idx")
  @@index([userId], name: "file_system_nodes_user_id_idx")
  @@map("file_system_nodes")
}

enum FileType {
  FILE
  FOLDER
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum RoleName {
  ADMIN
  SUPERVISOR
  ASSISTANT
}

enum PermissionName {
  READ
  WRITE
  DELETE
  SHARE
  UPLOAD
  DOWNLOAD
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}
