generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String           @unique
  projects       Project[]
  FileSystemNode FileSystemNode[] @relation("file_system_nodes_user_id_idx")

  @@map("user")
}

model Project {
  id           String   @id @default(cuid())
  name         String
  description  String?
  userId       String   @map("user_id")
  createdAt    DateTime @default(now()) @map("created_at")
  lastModified DateTime @updatedAt @map("last_modified")
  files        File[]
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("project")
}

model File {
  id        String   @id @default(cuid())
  name      String
  content   String   @db.Text
  projectId String   @map("project_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@map("file")
}

model FileSystemNode {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  type       FileType
  content    String?          @db.Text
  parentId   String?          @map("parent_id") @db.Uuid
  parent     FileSystemNode?  @relation("FileSystemNodeHierarchy", fields: [parentId], references: [id])
  children   FileSystemNode[] @relation("FileSystemNodeHierarchy")
  isExpanded Boolean          @default(false) @map("is_expanded")
  userId     String           @map("user_id")
  user       User             @relation("file_system_nodes_user_id_idx", fields: [userId], references: [id])
  createdAt  DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([userId], name: "file_system_nodes_user_id_idx")
  @@index([parentId], name: "file_system_nodes_parent_id_idx")
  @@map("file_system_nodes")
}

enum FileType {
  FILE
  FOLDER
}

model Document {
  id           String     @id @default(cuid())
  name         String
  content      String     @db.Text
  type         String
  parentId     String?    @map("parent_id")
  summary      String?    @db.Text
  lastModified DateTime   @default(now()) @updatedAt @map("last_modified")
  createdAt    DateTime   @default(now()) @map("created_at")
  parent       Document?  @relation("DocumentTree", fields: [parentId], references: [id])
  children     Document[] @relation("DocumentTree")

  @@map("document")
}
