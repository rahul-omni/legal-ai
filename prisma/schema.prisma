generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String?
  email                   String           @unique
  password                String?
  isVerified              Boolean?         @default(false) @map("is_verified")
  createdAt               DateTime?        @default(now()) @map("created_at")
  updatedAt               DateTime?        @updatedAt @map("updated_at")
  verificationToken       String?          @unique @map("verification_token")
  verificationTokenExpiry DateTime?        @map("verification_token_expiry")
  nodesCreated            FileSystemNode[] @relation("file_system_nodes_created_by_idx")
  nodesUpdated            FileSystemNode[] @relation("file_system_nodes_updated_by_idx")
  nodes                   FileSystemNode[] @relation("file_system_nodes_user_id_idx")
  orgMemberships          OrgMembership[]  @relation("org_memberships_user_id_idx")
  organizationsCreated    Organization[]   @relation("organization_createdByUser")
  accounts                Account[]        @relation("account_user_id_idx")
  sessions                Session[]        @relation("session_user_id_idx")

  @@map("users")
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation("account_user_id_idx", fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("session_user_id_idx", fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Role {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        RoleName     @unique
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  invitation  Invitation[] @relation("invitation_role_id_idx")
  permission  Permission[] @relation("role_permission_id_idx")

  @@map("roles")
}

model Permission {
  id        String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      PermissionName
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  roleId    String?        @map("role_id") @db.Uuid
  role      Role?          @relation("role_permission_id_idx", fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, name], name: "roleId_name_unique")
  @@map("permissions")
}

model Organization {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  plan          Plan            @default(FREE)
  isVerified    Boolean         @default(false) @map("is_verified")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  createdBy     String?         @map("created_by") @db.Uuid
  invitations   Invitation[]    @relation("organization_invitations_org_id_idx")
  members       OrgMembership[] @relation("org_memberships_org_id_idx")
  createdByUser User?           @relation("organization_createdByUser", fields: [createdBy], references: [id])

  @@map("organizations")
}

model OrgMembership {
  id        String       @id @default(uuid())
  userId    String       @map("user_id") @db.Uuid
  orgId     String       @map("organization_id") @db.Uuid
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  roleId    String       @map("role_id") @db.Uuid
  org       Organization @relation("org_memberships_org_id_idx", fields: [orgId], references: [id])
  user      User         @relation("org_memberships_user_id_idx", fields: [userId], references: [id])

  @@unique([userId, orgId])
  @@map("org_memberships")
}

model Invitation {
  id           String           @id @default(uuid())
  email        String
  token        String?          @unique
  expiresAt    DateTime?        @map("expires_at")
  orgId        String           @map("organization_id") @db.Uuid
  status       InvitationStatus @default(PENDING)
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  roleId       String           @map("role_id") @db.Uuid
  organization Organization     @relation("organization_invitations_org_id_idx", fields: [orgId], references: [id], onDelete: Cascade)
  role         Role             @relation("invitation_role_id_idx", fields: [roleId], references: [id])

  @@map("invitations")
}

model FileSystemNode {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  type          FileType
  content       String?
  parentId      String?          @map("parent_id") @db.Uuid
  isExpanded    Boolean          @default(false) @map("is_expanded")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  createdBy     String?          @map("created_by") @db.Uuid
  updatedBy     String?          @map("updated_by") @db.Uuid
  userId        String?          @map("user_id") @db.Uuid
  createdByUser User?            @relation("file_system_nodes_created_by_idx", fields: [createdBy], references: [id])
  parent        FileSystemNode?  @relation("file_system_node_hierarchy", fields: [parentId], references: [id])
  children      FileSystemNode[] @relation("file_system_node_hierarchy")
  updatedByUser User?            @relation("file_system_nodes_updated_by_idx", fields: [updatedBy], references: [id])
  user          User?            @relation("file_system_nodes_user_id_idx", fields: [userId], references: [id])

  @@index([createdBy])
  @@index([updatedBy])
  @@index([parentId])
  @@index([userId])
  @@map("file_system_nodes")
}

enum FileType {
  FILE
  FOLDER
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum RoleName {
  ADMIN
  SUPERVISOR
  ASSISTANT
}

enum PermissionName {
  READ
  WRITE
  DELETE
  SHARE
  UPLOAD
  DOWNLOAD
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  ACTIVE
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cases     Case[]
}

model Case {
  id           String   @id @default(cuid())
  title        String
  number       String   @unique
  status       String   @default("Active") // Active, Pending, Closed
  court        String?
  nextHearing  DateTime?
  practice     String?
  tags         String?  // Store as JSON string
  billingRate  Float?
  billingType  String?  // Hourly, Fixed, Contingency
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  client       Client   @relation(fields: [clientId], references: [id])
  clientId     String
}
